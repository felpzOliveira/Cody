#include <aes.h>
#include <rng.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <cryptoutil.h>
#include <iostream>

#define AES_BLOCK_SIZE_IN_BYTES 16
#define AES_BLOCK_SIZE_IN_BITS  128
#define AES_MAX_STATE_SIZE 32
#define AES_MAX_EXPANDED_KEY_SIZE_IN_BYTES ((AES_BLOCK_SIZE_IN_BYTES) * 15)

#define AES_WORD_XOR(b0, b1)\
(b0)[0] = (b0)[0] ^ (b1)[0];\
(b0)[1] = (b0)[1] ^ (b1)[1];\
(b0)[2] = (b0)[2] ^ (b1)[2];\
(b0)[3] = (b0)[3] ^ (b1)[3];

#define AES_SET_WORD(dst, src, offset) \
(dst)[0] = (src)[4 * (offset)];\
(dst)[1] = (src)[4 * (offset) + 1];\
(dst)[2] = (src)[4 * (offset) + 2];\
(dst)[3] = (src)[4 * (offset) + 3];

static uint8_t AES_SBox[256] = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

static uint8_t AES_InvSBox[256] = {
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

static uint8_t AES_Rcon[11] = { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36 };

typedef struct{
    uint8_t state[AES_MAX_STATE_SIZE]; // state of the aes at any point
    uint8_t expandedKey[AES_MAX_EXPANDED_KEY_SIZE_IN_BYTES]; // expanded key, blockSize * (rounds+1)
    unsigned int blockSize; // block size, mostly 16
    unsigned int rounds; // number of rounds, depend on key size
    unsigned int keySize; // key size in bytes
    unsigned int columns; // columns in the AES state, i.e.: blockSize / 32
}AesContext;

static unsigned int AES_KeySizeInBytes(AesKeyLength length){
    unsigned int size = 0;
    switch(length){
        case AES128: size = 16; break;
        case AES192: size = 24; break;
        case AES256: size = 32; break;
    }

    return size;
}

static unsigned int AES_KeySizeInBits(AesKeyLength length){
    unsigned int size = 0;
    switch(length){
        case AES128: size = 128; break;
        case AES192: size = 192; break;
        case AES256: size = 256; break;
    }

    return size;
}

static unsigned int AES_NumberOfRounds(AesKeyLength length){
    unsigned int rounds = 0;
    switch(length){
        case AES128: rounds = 10; break;
        case AES192: rounds = 12; break;
        case AES256: rounds = 14; break;
    }

    return rounds;
}

static void AES_SubByte(uint8_t *buffer, size_t len){
    for(size_t i = 0; i < len; i++){
        buffer[i] = AES_SBox[buffer[i]];
    }
}

static void AES_InitializeContext(AesContext *ctx, AesKeyLength length){
    ctx->keySize = AES_KeySizeInBytes(length);
    ctx->blockSize = AES_BLOCK_SIZE_IN_BYTES;
    ctx->rounds = AES_NumberOfRounds(length);
    ctx->columns = (AES_BLOCK_SIZE_IN_BITS >> 5);
    memset(ctx->state, 0, AES_MAX_STATE_SIZE);
    memset(ctx->expandedKey, 0, AES_MAX_EXPANDED_KEY_SIZE_IN_BYTES);
}

static bool AES_KeyExpansion(AesContext *ctx, uint8_t *key){
    unsigned int size = ctx->keySize;
    unsigned int Nb = ctx->columns;
    unsigned int Nk = (size * 8) >> 5; // size of each piece is key size / 32
    int it = Nb * (1 + ctx->rounds);
    uint8_t *exp = ctx->expandedKey;
    uint8_t tmp[4], ss[4];

    // 1 - Copy the initial key to the expanded key first round key address K0
    memcpy(exp, key, size);

    // 2 - For each Nb bytes following apply expansion. Accoding to AES Proposal
    //     Nb = BlockSize / 32, which for us is in ctx->columns, the fact that
    //     the original key lies in the first bytes does not matter. It doesn't
    //     seem to have any relation between the key size and the expanded key
    //     Nb length. Iteration however begins at key size / 32.
    if(Nk <= 6){
        for(int i = Nk; i < it; i++){
            AES_SET_WORD(tmp, exp, i-1);
            AES_SET_WORD(ss, exp, i-Nk);
            if(i % Nk == 0){
                unsigned int rcon = i / Nk;
                CryptoUtil_RotateBufferLeft(tmp, Nb);
                AES_SubByte(tmp, 4);
                tmp[0] ^= AES_Rcon[rcon];
            }

            AES_WORD_XOR(tmp, ss);
            AES_SET_WORD(&exp[4 * i], tmp, 0);
        }

    }else{
        for(int i = Nk; i < it; i++){
            AES_SET_WORD(tmp, exp, i-1);
            AES_SET_WORD(ss, exp, i-Nk);
            if(i % Nk == 0){
                unsigned int rcon = i / Nk;
                CryptoUtil_RotateBufferLeft(tmp, Nb);
                AES_SubByte(tmp, 4);
                tmp[0] ^= AES_Rcon[rcon];
            }else if(i % 4 == 0){
                AES_SubByte(tmp, 4);
            }

            AES_WORD_XOR(tmp, ss);
            AES_SET_WORD(&exp[4 * i], tmp, 0);
        }
    }

    memset(tmp, 0, 4);
    memset(ss, 0, 4);

    return true;
}

static void Debug_AesPrintExpandedKeys(AesContext *ctx){
    int words = ctx->columns * (ctx->rounds + 1);
    int nk = (ctx->keySize * 8) >> 5;
    std::vector<std::string> keys;
    std::string tmp;
    int c = 0;
    for(int w = 0; w < words; w++){
        uint8_t *ptr = &ctx->expandedKey[w * 4];
        std::string str;
        CryptoUtil_BufferToHex(ptr, 4, str);
        std::cout << "word " << w << " " << str << std::endl;

        c++;
        if(c == nk){
            tmp += str;
            keys.push_back(tmp);
            c = 0;
            tmp = std::string();
        }else{
            tmp += str;
        }
    }

    c = 0;
    for(std::string v : keys){
        std::cout << "Round " << c << " " << v << std::endl;
        c++;
    }
}

bool AES_GenerateKey(void *buffer, AesKeyLength length){
    unsigned int size = AES_KeySizeInBytes(length);
    if(size == 0){
        printf("Invalid key size\n");
        return false;
    }

    AesContext ctx;
    AES_InitializeContext(&ctx, AES128);

    uint8_t key[] = {104, 101, 108, 108, 111, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48};

    printf("Size = %d\n", (int)sizeof(key));

    AES_KeyExpansion(&ctx, key);
    Debug_AesPrintExpandedKeys(&ctx);

    return Crypto_SecureRNG(buffer, size);
}
