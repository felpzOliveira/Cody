#include <languages.h>

/* Because I like to program in CUDA, this contains keywords for that */


TokenizerSupport cppSupport = {
    .comments = true,
    .strings = true,
    .numbers = true,
    .lookups = true,
    .multilineComment = true,
    .lineCommentChar = 0,
};

/* C/C++ tokens that can happen inside a code and are not preprocessor */
std::vector<std::vector<GToken>> cppReservedTable = {
    {
        { .value = "+", .identifier = TOKEN_ID_MATH },
        { .value = "-", .identifier = TOKEN_ID_MATH },
        { .value = ">", .identifier = TOKEN_ID_MORE },
        { .value = "<", .identifier = TOKEN_ID_LESS },
        { .value = "/", .identifier = TOKEN_ID_MATH },
        { .value = "%", .identifier = TOKEN_ID_MATH },
        { .value = "!", .identifier = TOKEN_ID_MATH },
        { .value = "=", .identifier = TOKEN_ID_MATH },
        { .value = "*", .identifier = TOKEN_ID_ASTERISK },
        { .value = "&", .identifier = TOKEN_ID_MATH },
        { .value = "|", .identifier = TOKEN_ID_MATH },
        { .value = "^", .identifier = TOKEN_ID_MATH },
        { .value = "~", .identifier = TOKEN_ID_MATH },
        { .value = ",", .identifier = TOKEN_ID_COMMA },
        { .value = ";", .identifier = TOKEN_ID_SEMICOLON },
        { .value = ".", .identifier = TOKEN_ID_MATH },
        { .value = "(", .identifier = TOKEN_ID_PARENTHESE_OPEN },
        { .value = ")", .identifier = TOKEN_ID_PARENTHESE_CLOSE },
        { .value = "{", .identifier = TOKEN_ID_BRACE_OPEN },
        { .value = "}", .identifier = TOKEN_ID_BRACE_CLOSE },
        { .value = "[", .identifier = TOKEN_ID_BRACKET_OPEN },
        { .value = "]", .identifier = TOKEN_ID_BRACKET_CLOSE },
        { .value = ":", .identifier = TOKEN_ID_MATH } },
    {
        { .value = "do", .identifier = TOKEN_ID_OPERATOR },
        { .value = "if", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "asm", .identifier = TOKEN_ID_OPERATOR },
        { .value = "for", .identifier = TOKEN_ID_OPERATOR },
        { .value = "try", .identifier = TOKEN_ID_OPERATOR },
        { .value = "int", .identifier = TOKEN_ID_DATATYPE },
        { .value = "new", .identifier = TOKEN_ID_OPERATOR },
        { .value = "and", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "FILE", .identifier = TOKEN_ID_DATATYPE },
        { .value = "dim3", .identifier = TOKEN_ID_DATATYPE },
        { .value = "this", .identifier = TOKEN_ID_OPERATOR },
        { .value = "char", .identifier = TOKEN_ID_DATATYPE },
        { .value = "long", .identifier = TOKEN_ID_DATATYPE },
        { .value = "NULL", .identifier = TOKEN_ID_OPERATOR },
        { .value = "case", .identifier = TOKEN_ID_OPERATOR },
        { .value = "true", .identifier = TOKEN_ID_OPERATOR },
        { .value = "else", .identifier = TOKEN_ID_OPERATOR },
        { .value = "goto", .identifier = TOKEN_ID_OPERATOR },
        { .value = "bool", .identifier = TOKEN_ID_DATATYPE },
        { .value = "void", .identifier = TOKEN_ID_DATATYPE },
        { .value = "enum", .identifier = TOKEN_ID_DATATYPE_ENUM_DEF },
        { .value = "auto", .identifier = TOKEN_ID_DATATYPE }, },
    {
        { .value = "short", .identifier = TOKEN_ID_DATATYPE },
        { .value = "const", .identifier = TOKEN_ID_DATATYPE },
        { .value = "union", .identifier = TOKEN_ID_OPERATOR },
        { .value = "using", .identifier = TOKEN_ID_OPERATOR },
        { .value = "class", .identifier = TOKEN_ID_DATATYPE_CLASS_DEF },
        { .value = "final", .identifier = TOKEN_ID_OPERATOR },
        { .value = "false", .identifier = TOKEN_ID_OPERATOR },
        { .value = "float", .identifier = TOKEN_ID_DATATYPE },
        { .value = "catch", .identifier = TOKEN_ID_OPERATOR },
        { .value = "throw", .identifier = TOKEN_ID_OPERATOR },
        { .value = "while", .identifier = TOKEN_ID_OPERATOR },
        { .value = "break", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "friend", .identifier = TOKEN_ID_OPERATOR },
        { .value = "int8_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "size_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "inline", .identifier = TOKEN_ID_OPERATOR },
        { .value = "static", .identifier = TOKEN_ID_OPERATOR },
        { .value = "sizeof", .identifier = TOKEN_ID_OPERATOR },
        { .value = "and_eq", .identifier = TOKEN_ID_OPERATOR },
        { .value = "signed", .identifier = TOKEN_ID_DATATYPE },
        { .value = "delete", .identifier = TOKEN_ID_OPERATOR },
        { .value = "switch", .identifier = TOKEN_ID_OPERATOR },
        { .value = "typeid", .identifier = TOKEN_ID_OPERATOR },
        { .value = "export", .identifier = TOKEN_ID_OPERATOR },
        { .value = "return", .identifier = TOKEN_ID_OPERATOR },
        { .value = "extern", .identifier = TOKEN_ID_OPERATOR },
        { .value = "public", .identifier = TOKEN_ID_OPERATOR },
        { .value = "double", .identifier = TOKEN_ID_DATATYPE },
        { .value = "struct", .identifier = TOKEN_ID_DATATYPE_STRUCT_DEF }, },
    {
        { .value = "va_list", .identifier = TOKEN_ID_DATATYPE },
        { .value = "ssize_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "clock_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "mutable", .identifier = TOKEN_ID_OPERATOR },
        { .value = "nullptr", .identifier = TOKEN_ID_OPERATOR },
        { .value = "alignas", .identifier = TOKEN_ID_OPERATOR },
        { .value = "wchar_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "uint8_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "int16_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "int32_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "int64_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "virtual", .identifier = TOKEN_ID_OPERATOR },
        { .value = "default", .identifier = TOKEN_ID_OPERATOR },
        { .value = "alignof", .identifier = TOKEN_ID_OPERATOR },
        { .value = "private", .identifier = TOKEN_ID_OPERATOR },
		{ .value = "gridDim", .identifier = TOKEN_ID_RESERVED },
        { .value = "typedef", .identifier = TOKEN_ID_DATATYPE_TYPEDEF_DEF }, },
    {
        { .value = "intptr_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUstream", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUtexref", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUmodule", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUdevice", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUresult", .identifier = TOKEN_ID_DATATYPE },
        { .value = "decltype", .identifier = TOKEN_ID_OPERATOR },
        { .value = "uint32_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "uint64_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "operator", .identifier = TOKEN_ID_OPERATOR },
        { .value = "template", .identifier = TOKEN_ID_OPERATOR },
        { .value = "__func__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__FILE__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__LINE__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__DATE__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__TIME__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__host__", .identifier = TOKEN_ID_RESERVED },
        { .value = "explicit", .identifier = TOKEN_ID_OPERATOR },
        { .value = "register", .identifier = TOKEN_ID_OPERATOR },
        { .value = "requires", .identifier = TOKEN_ID_OPERATOR },
        { .value = "override", .identifier = TOKEN_ID_OPERATOR },
        { .value = "typename", .identifier = TOKEN_ID_OPERATOR },
        { .value = "volatile", .identifier = TOKEN_ID_OPERATOR },
        { .value = "unsigned", .identifier = TOKEN_ID_DATATYPE },
        { .value = "blockDim", .identifier = TOKEN_ID_RESERVED },
        { .value = "blockIdx", .identifier = TOKEN_ID_RESERVED },
        { .value = "warpSize", .identifier = TOKEN_ID_RESERVED },
        { .value = "continue", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "CUcontext", .identifier = TOKEN_ID_DATATYPE },
        { .value = "uintptr_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "threadIdx", .identifier = TOKEN_ID_RESERVED },
        { .value = "constexpr", .identifier = TOKEN_ID_OPERATOR },
        { .value = "protected", .identifier = TOKEN_ID_OPERATOR },
        { .value = "namespace", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "CUfunction", .identifier = TOKEN_ID_DATATYPE },
        { .value = "const_cast", .identifier = TOKEN_ID_OPERATOR },
        { .value = "__device__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__global__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__inline__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__shared__", .identifier = TOKEN_ID_RESERVED }, },
    {
        { .value = "OptixResult", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUdeviceptr", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUlinkState", .identifier = TOKEN_ID_DATATYPE },
        { .value = "cudaSuccess", .identifier = TOKEN_ID_RESERVED },
        { .value = "cudaEvent_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "cudaError_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "static_cast", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "__FUNCTION__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__constant__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__restrict__", .identifier = TOKEN_ID_RESERVED },
        { .value = "dynamic_cast", .identifier = TOKEN_ID_OPERATOR },
        { .value = "thread_local", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "__CUDA_ARCH__", .identifier = TOKEN_ID_RESERVED },
        { .value = "static_assert", .identifier = TOKEN_ID_OPERATOR },
        { .value = "__TIMESTAMP__", .identifier = TOKEN_ID_RESERVED } },
    {
        { .value = "__forceinline__", .identifier = TOKEN_ID_RESERVED } },
    {
        { .value = "reinterpret_cast", .identifier = TOKEN_ID_OPERATOR } },
    {
        { .value = "cudaMemcpyHostToDevice", .identifier = TOKEN_ID_RESERVED },
        { .value = "cudaMemcpyDeviceToHost", .identifier = TOKEN_ID_RESERVED } }
};

/* C/C++ tokens that can happen inside a preprocessor */
std::vector<std::vector<GToken>> cppReservedPreprocessor = {
    {
        { .value = "#", .identifier = TOKEN_ID_PREPROCESSOR },
        { .value = "+", .identifier = TOKEN_ID_MATH },
        { .value = "-", .identifier = TOKEN_ID_MATH },
        { .value = ">", .identifier = TOKEN_ID_MORE },
        { .value = "<", .identifier = TOKEN_ID_LESS },
        { .value = "/", .identifier = TOKEN_ID_MATH },
        { .value = "%", .identifier = TOKEN_ID_MATH },
        { .value = "!", .identifier = TOKEN_ID_MATH },
        { .value = "=", .identifier = TOKEN_ID_MATH },
        { .value = "*", .identifier = TOKEN_ID_ASTERISK },
        { .value = "&", .identifier = TOKEN_ID_MATH },
        { .value = "|", .identifier = TOKEN_ID_MATH },
        { .value = "^", .identifier = TOKEN_ID_MATH },
        { .value = "~", .identifier = TOKEN_ID_MATH },
        { .value = ",", .identifier = TOKEN_ID_COMMA },
        { .value = ";", .identifier = TOKEN_ID_SEMICOLON },
        { .value = ".", .identifier = TOKEN_ID_MATH },
        { .value = "(", .identifier = TOKEN_ID_PARENTHESE_OPEN },
        { .value = ")", .identifier = TOKEN_ID_PARENTHESE_CLOSE },
        { .value = "{", .identifier = TOKEN_ID_BRACE_OPEN },
        { .value = "}", .identifier = TOKEN_ID_BRACE_CLOSE },
        { .value = "[", .identifier = TOKEN_ID_BRACKET_OPEN },
        { .value = "]", .identifier = TOKEN_ID_BRACKET_CLOSE },
        { .value = ":", .identifier = TOKEN_ID_MATH } },
    {
        { .value = "do", .identifier = TOKEN_ID_OPERATOR },
        { .value = "if", .identifier = TOKEN_ID_PREPROCESSOR_IF }, },
    {
        { .value = "asm", .identifier = TOKEN_ID_OPERATOR },
        { .value = "for", .identifier = TOKEN_ID_OPERATOR },
        { .value = "try", .identifier = TOKEN_ID_OPERATOR },
        { .value = "int", .identifier = TOKEN_ID_DATATYPE },
        { .value = "new", .identifier = TOKEN_ID_OPERATOR },
        { .value = "and", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "elif", .identifier = TOKEN_ID_PREPROCESSOR_IF },
        { .value = "FILE", .identifier = TOKEN_ID_DATATYPE },
        { .value = "dim3", .identifier = TOKEN_ID_DATATYPE },
        { .value = "this", .identifier = TOKEN_ID_OPERATOR },
        { .value = "char", .identifier = TOKEN_ID_DATATYPE },
        { .value = "long", .identifier = TOKEN_ID_DATATYPE },
        { .value = "NULL", .identifier = TOKEN_ID_OPERATOR },
        { .value = "case", .identifier = TOKEN_ID_OPERATOR },
        { .value = "true", .identifier = TOKEN_ID_OPERATOR },
        { .value = "else", .identifier = TOKEN_ID_PREPROCESSOR_IF },
        { .value = "line", .identifier = TOKEN_ID_PREPROCESSOR },
        { .value = "goto", .identifier = TOKEN_ID_OPERATOR },
        { .value = "bool", .identifier = TOKEN_ID_DATATYPE },
        { .value = "void", .identifier = TOKEN_ID_DATATYPE },
        { .value = "enum", .identifier = TOKEN_ID_DATATYPE_ENUM_DEF },
        { .value = "auto", .identifier = TOKEN_ID_DATATYPE }, },
    {
        { .value = "short", .identifier = TOKEN_ID_DATATYPE },
        { .value = "const", .identifier = TOKEN_ID_DATATYPE  },
        { .value = "undef", .identifier = TOKEN_ID_PREPROCESSOR },
        { .value = "ifdef", .identifier = TOKEN_ID_PREPROCESSOR },
        { .value = "error", .identifier = TOKEN_ID_PREPROCESSOR },
        { .value = "endif", .identifier = TOKEN_ID_PREPROCESSOR },
        { .value = "union", .identifier = TOKEN_ID_OPERATOR },
        { .value = "using", .identifier = TOKEN_ID_OPERATOR },
        { .value = "class", .identifier = TOKEN_ID_DATATYPE_CLASS_DEF },
        { .value = "final", .identifier = TOKEN_ID_OPERATOR },
        { .value = "false", .identifier = TOKEN_ID_OPERATOR },
        { .value = "float", .identifier = TOKEN_ID_DATATYPE },
        { .value = "catch", .identifier = TOKEN_ID_OPERATOR },
        { .value = "throw", .identifier = TOKEN_ID_OPERATOR },
        { .value = "while", .identifier = TOKEN_ID_OPERATOR },
        { .value = "break", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "define", .identifier = TOKEN_ID_PREPROCESSOR_DEFINE },
        { .value = "ifndef", .identifier = TOKEN_ID_PREPROCESSOR },
        { .value = "pragma", .identifier = TOKEN_ID_PREPROCESSOR},
        { .value = "friend", .identifier = TOKEN_ID_OPERATOR },
        { .value = "int8_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "size_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "inline", .identifier = TOKEN_ID_OPERATOR },
        { .value = "static", .identifier = TOKEN_ID_OPERATOR },
        { .value = "sizeof", .identifier = TOKEN_ID_OPERATOR },
        { .value = "and_eq", .identifier = TOKEN_ID_OPERATOR },
        { .value = "signed", .identifier = TOKEN_ID_DATATYPE },
        { .value = "delete", .identifier = TOKEN_ID_OPERATOR },
        { .value = "switch", .identifier = TOKEN_ID_OPERATOR },
        { .value = "typeid", .identifier = TOKEN_ID_OPERATOR },
        { .value = "export", .identifier = TOKEN_ID_OPERATOR },
        { .value = "return", .identifier = TOKEN_ID_OPERATOR },
        { .value = "extern", .identifier = TOKEN_ID_OPERATOR },
        { .value = "public", .identifier = TOKEN_ID_OPERATOR },
        { .value = "double", .identifier = TOKEN_ID_DATATYPE },
        { .value = "struct", .identifier = TOKEN_ID_DATATYPE_STRUCT_DEF }, },
    {
        { .value = "va_list", .identifier = TOKEN_ID_DATATYPE },
        { .value = "ssize_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "clock_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "include", .identifier = TOKEN_ID_INCLUDE_SEL },
        { .value = "defined", .identifier = TOKEN_ID_OPERATOR },
        { .value = "warning", .identifier = TOKEN_ID_PREPROCESSOR },
        { .value = "mutable", .identifier = TOKEN_ID_OPERATOR },
        { .value = "uint8_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "int16_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "int32_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "int64_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "nullptr", .identifier = TOKEN_ID_OPERATOR },
        { .value = "alignas", .identifier = TOKEN_ID_OPERATOR },
        { .value = "wchar_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "virtual", .identifier = TOKEN_ID_OPERATOR },
        { .value = "default", .identifier = TOKEN_ID_OPERATOR },
        { .value = "alignof", .identifier = TOKEN_ID_OPERATOR },
        { .value = "private", .identifier = TOKEN_ID_OPERATOR },
		{ .value = "gridDim", .identifier = TOKEN_ID_RESERVED },
        { .value = "typedef", .identifier = TOKEN_ID_DATATYPE_TYPEDEF_DEF }, },
    {
        { .value = "intptr_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUstream", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUtexref", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUmodule", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUdevice", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUresult", .identifier = TOKEN_ID_DATATYPE },
        { .value = "decltype", .identifier = TOKEN_ID_OPERATOR },
        { .value = "uint32_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "uint64_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "operator", .identifier = TOKEN_ID_OPERATOR },
        { .value = "template", .identifier = TOKEN_ID_OPERATOR },
        { .value = "__func__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__FILE__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__LINE__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__DATE__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__TIME__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__host__", .identifier = TOKEN_ID_RESERVED },
        { .value = "explicit", .identifier = TOKEN_ID_OPERATOR },
        { .value = "register", .identifier = TOKEN_ID_OPERATOR },
        { .value = "requires", .identifier = TOKEN_ID_OPERATOR },
        { .value = "override", .identifier = TOKEN_ID_OPERATOR },
        { .value = "typename", .identifier = TOKEN_ID_OPERATOR },
        { .value = "volatile", .identifier = TOKEN_ID_OPERATOR },
        { .value = "unsigned", .identifier = TOKEN_ID_DATATYPE },
        { .value = "blockDim", .identifier = TOKEN_ID_RESERVED },
        { .value = "blockIdx", .identifier = TOKEN_ID_RESERVED },
        { .value = "warpSize", .identifier = TOKEN_ID_RESERVED },
        { .value = "continue", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "CUcontext", .identifier = TOKEN_ID_DATATYPE },
        { .value = "uintptr_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "threadIdx", .identifier = TOKEN_ID_RESERVED },
        { .value = "constexpr", .identifier = TOKEN_ID_OPERATOR },
        { .value = "protected", .identifier = TOKEN_ID_OPERATOR },
        { .value = "namespace", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "CUfunction", .identifier = TOKEN_ID_DATATYPE },
        { .value = "const_cast", .identifier = TOKEN_ID_OPERATOR },
        { .value = "__device__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__global__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__inline__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__shared__", .identifier = TOKEN_ID_RESERVED }, },
    {
        { .value = "OptixResult", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUdeviceptr", .identifier = TOKEN_ID_DATATYPE },
        { .value = "CUlinkState", .identifier = TOKEN_ID_DATATYPE },
        { .value = "cudaSuccess", .identifier = TOKEN_ID_RESERVED },
        { .value = "cudaEvent_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "cudaError_t", .identifier = TOKEN_ID_DATATYPE },
        { .value = "static_cast", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "__FUNCTION__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__constant__", .identifier = TOKEN_ID_RESERVED },
        { .value = "__restrict__", .identifier = TOKEN_ID_RESERVED },
        { .value = "dynamic_cast", .identifier = TOKEN_ID_OPERATOR },
        { .value = "thread_local", .identifier = TOKEN_ID_OPERATOR }, },
    {
        { .value = "__CUDA_ARCH__", .identifier = TOKEN_ID_RESERVED },
        { .value = "static_assert", .identifier = TOKEN_ID_OPERATOR },
        { .value = "__TIMESTAMP__", .identifier = TOKEN_ID_RESERVED } },
    {
        { .value = "__forceinline__", .identifier = TOKEN_ID_RESERVED } },
    {
        { .value = "reinterpret_cast", .identifier = TOKEN_ID_OPERATOR } },
    {
        { .value = "cudaMemcpyHostToDevice", .identifier = TOKEN_ID_RESERVED },
        { .value = "cudaMemcpyDeviceToHost", .identifier = TOKEN_ID_RESERVED } }
};
